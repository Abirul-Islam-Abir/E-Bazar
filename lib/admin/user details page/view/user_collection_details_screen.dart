import 'package:ecommerce_firebase/admin/user%20details%20page/controller/user_details_controller.dart';import 'package:ecommerce_firebase/api/push_notification_api.dart';import 'package:ecommerce_firebase/utils/user_collection.dart';import '../../../utils/export.dart';class UserCollectionDetailsScreen extends StatelessWidget {  final String documentId;  UserCollectionDetailsScreen({super.key, required this.documentId});  final controller = Get.put(UserDetailsController());  @override  Widget build(BuildContext context) {    return Scaffold(        body: SafeArea(      child: FutureBuilder<DocumentSnapshot>(        future: Collection.collectionProfile.doc(documentId).get(),        builder:            (BuildContext context, AsyncSnapshot<DocumentSnapshot> snapshot) {          if (snapshot.hasError) {            return Text("Something went wrong");          }          if (snapshot.hasData && !snapshot.data!.exists) {            return Text("Document does not exist");          }          if (snapshot.connectionState == ConnectionState.waiting) {            return Container();          }          Map<String, dynamic> data =              snapshot.data!.data() as Map<String, dynamic>;          controller.nameController.text = data['Name'];          controller.emailController.text = data['Email'];          controller.addressController.text = data['Address'];          controller.mobileController.text = data['Mobile'];          controller.passwordController.text = data['Password'];          return Container(            width: Get.width,            child: SingleChildScrollView(              child: Form(                  key: controller.formKey,                  child: Column(                    children: [                      CircleAvatar(                          backgroundColor: AppColor.kTransparentColor,                          radius: 40,                          child: Image.memory(                              decodeBase64Image('${data['Photo']}'))),                      Column(                        children: [                          CustomTextField(                              readOnly: true,                              controller: controller.emailController,                              validator: validate,                              focusNode: controller.emailFocus,                              onFieldSubmitted: (v) {                                FocusScope.of(context)                                    .requestFocus(controller.nameFocus);                              },                              textInputAction: TextInputAction.next,                              keyboardType: TextInputType.name,                              hintText: AppString.email,                              label: AppString.email,                              suffixIcon: IconButton(                                  onPressed: () {},                                  icon: const Icon(Icons.man))),                          CustomTextField(                            controller: controller.nameController,                            validator: validate,                            focusNode: controller.nameFocus,                            onFieldSubmitted: (v) {                              FocusScope.of(context)                                  .requestFocus(controller.addressFocus);                            },                            textInputAction: TextInputAction.next,                            keyboardType: TextInputType.name,                            hintText: AppString.name,                            label: AppString.name,                            suffixIcon: IconButton(                                onPressed: () {}, icon: const Icon(Icons.man)),                          ),                          const SizedBox(height: kSmallSize),                          CustomTextField(                            controller: controller.addressController,                            validator: validate,                            focusNode: controller.addressFocus,                            onFieldSubmitted: (v) {                              FocusScope.of(context)                                  .requestFocus(controller.mobileFocus);                            },                            textInputAction: TextInputAction.done,                            keyboardType: TextInputType.name,                            hintText: AppString.address,                            label: AppString.address,                            suffixIcon: IconButton(                                onPressed: () {}, icon: const Icon(Icons.man)),                          ),                          const SizedBox(height: kSmallSize),                          CustomTextField(                            controller: controller.mobileController,                            validator: validateMobile,                            focusNode: controller.mobileFocus,                            onFieldSubmitted: (v) {                              FocusScope.of(context)                                  .requestFocus(controller.passwordFocus);                            },                            textInputAction: TextInputAction.done,                            keyboardType: TextInputType.name,                            hintText: AppString.mobileNumber,                            label: AppString.mobileNumber,                            suffixIcon: IconButton(                                onPressed: () {},                                icon: const Icon(Icons.numbers)),                          ),                          const SizedBox(height: kSmallSize),                          CustomTextField(                            readOnly: true,                            controller: controller.passwordController,                            validator: validate,                            focusNode: controller.passwordFocus,                            onFieldSubmitted: (v) {                              controller.validateSubmit(documentId);                            },                            textInputAction: TextInputAction.next,                            keyboardType: TextInputType.name,                            hintText: AppString.password,                            label: AppString.password,                            suffixIcon: IconButton(                                onPressed: () {},                                icon: const Icon(Icons.location_on)),                          ),                        ],                      ),                      const SizedBox(height: kSmallSize),                      GlobalButton(                          onPress: () {                            controller.validateSubmit(documentId);                          },                          text: AppString.updateProfile),                      SizedBox(height: kTooSmallSize),                      CustomTextField(                        controller: controller.title,                        hintText: 'Title',                        label: 'Title',                      ),                      SizedBox(height: kTooSmallSize),                      CustomTextField(                        controller: controller.desc,                        hintText: 'Description',                        label: 'Describe',                      ),                      SizedBox(height: kTooSmallSize),                      GlobalButton(                          onPress: () {                            pushNotificationUserRequestApi(                              title: controller.title.text,                              description: controller.desc.text,                              deviceToken: '${data['FcmToken']}',                            );                          },                          text: AppString.pushNotification)                    ],                  )),            ),          );        },      ),    ));  }}