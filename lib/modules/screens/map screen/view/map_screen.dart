import 'dart:async';import 'package:flutter/material.dart';import 'package:flutter/services.dart';import 'package:google_maps_flutter/google_maps_flutter.dart';import 'package:location/location.dart';class MapScreen extends StatefulWidget {  const MapScreen({Key? key}) : super(key: key);  @override  State<MapScreen> createState() => MapScreenState();}class MapScreenState extends State<MapScreen> {  final Completer<GoogleMapController> _controller =      Completer<GoogleMapController>();  double lat = 37.43296265331129;  double lng = -122.08832357078792;  static const CameraPosition cameraPosition = CameraPosition(    target: LatLng(37.42796133580664, -122.085749655962),    zoom: 14.4746,  );  GoogleMapController? mapController;  final Location location = Location();  LatLng? userLocation;  final List<Marker> markers = []; // Use a single list for markers  final List<LatLng> polylinePoints = [];  Future<void> getCurrentLocation() async {    try {      final PermissionStatus permissionStatus =          await location.requestPermission();      if (permissionStatus == PermissionStatus.granted) {        final LocationData position = await location.getLocation();        setState(() {          lat = position.latitude!;          lng = position.longitude!;        });        updateLocation();        onLocationChanged();      }    } on PlatformException catch (e) {      if (e.code == 'PERMISSION_DENIED') {        // Handle permission denied      }    }  }  Future<void> updateLocation() async {    final GoogleMapController controller = await _controller.future;    addMarker(lat, lng, 'My Current Location!');    await controller.animateCamera(CameraUpdate.newCameraPosition(        CameraPosition(            bearing: 192.8334901395799,            target: LatLng(lat, lng),            tilt: 59.440717697143555,            zoom: 14.00)));  }  // Function to add markers  void addMarker(double lat, double lng, String title) {    final MarkerId markerId = MarkerId('$lat$lng');    Marker iconMarker = Marker(      markerId: markerId,      position: LatLng(lat, lng),      infoWindow: InfoWindow(title: title, snippet: 'Lat:$lat,Lng:$lng'),    );    setState(() {      markers.add(iconMarker);    });  }  MapType currentMapType = MapType.normal;  List<MapType> availableMapTypes = [    MapType.normal,    MapType.satellite,    MapType.hybrid,    MapType.terrain,  ];  // Function to change the map type  void onMapTypeChanged(MapType newMapType) {    setState(() {      currentMapType = newMapType;    });  }  void onLocationChanged() {    location.onLocationChanged.listen((position) {      setState(() {        lat = position.latitude!;        lng = position.longitude!;      });      final LatLng latLng = LatLng(position.latitude!, position.longitude!);      polylinePoints.add(latLng);      addMarker(lat, lng, 'My Current Location!');    });  }  @override  void initState() {    getCurrentLocation();    super.initState();  }  @override  Widget build(BuildContext context) {    return SafeArea(        child: Scaffold(      extendBodyBehindAppBar: true,      appBar: AppBar(        backgroundColor: Colors.transparent,        title: const Text('Google Map'),        actions: [          IconButton(            icon: Icon(Icons.search),            onPressed: () async {              final String? result = await showSearch<String>(                context: context,                delegate: CustomSearchDelegate(),              );              if (result != null && result.isNotEmpty) {}            },          ),          // Add PopupMenuButton to change map type          PopupMenuButton<MapType>(            onSelected: onMapTypeChanged,            itemBuilder: (BuildContext context) {              return availableMapTypes.map((MapType mapType) {                return PopupMenuItem<MapType>(                  value: mapType,                  child: Text(mapType.toString().split('.').last),                );              }).toList();            },          ),          // Search for places        ],      ),      body: GoogleMap(        mapType: currentMapType,        onTap: (LatLng position) {          addMarker(              position.latitude, position.longitude, 'My Selected Location!');        },        polylines: {          Polyline(            polylineId: PolylineId("tracking"),            color: Colors.blue,            points: polylinePoints,            width: 5,          )        },        markers: Set<Marker>.of(markers),        initialCameraPosition: cameraPosition,        onMapCreated: (GoogleMapController controller) {          _controller.complete(controller);        },      ),      floatingActionButtonLocation: FloatingActionButtonLocation.startFloat,      floatingActionButton: FloatingActionButton(        onPressed: getCurrentLocation,        child: const Icon(Icons.location_on),      ),    ));  }}class CustomSearchDelegate extends SearchDelegate<String> {  @override  List<Widget> buildActions(BuildContext context) {    return [      IconButton(        icon: Icon(Icons.clear),        onPressed: () {          query = '';        },      )    ];  }  @override  Widget buildLeading(BuildContext context) {    return IconButton(      icon: Icon(Icons.arrow_back),      onPressed: () {        close(context, '');      },    );  }  @override  Widget buildResults(BuildContext context) {    return Center(      child: Text('Searching for $query...'),    );  }  @override  Widget buildSuggestions(BuildContext context) {    // You can add suggestions here if needed    return SizedBox.shrink();  }}